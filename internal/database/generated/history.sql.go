// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: history.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertMessageHistory = `-- name: InsertMessageHistory :one
INSERT INTO message_history (
    message_uri,
    message_cid,
    author_did,
    author_handle,
    message_text,
    llm_response,
    reply_uri,
    reply_cid,
    status,
    retry_count,
    error_message,
    used_google_search_grounding,
    model_name,
    received_at,
    processing_started_at,
    completed_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, NOW()
) RETURNING id, message_uri, message_cid, author_did, author_handle, message_text, llm_response, reply_uri, reply_cid, status, retry_count, error_message, used_google_search_grounding, received_at, processing_started_at, completed_at, model_name
`

type InsertMessageHistoryParams struct {
	MessageUri                string             `json:"message_uri"`
	MessageCid                string             `json:"message_cid"`
	AuthorDid                 string             `json:"author_did"`
	AuthorHandle              string             `json:"author_handle"`
	MessageText               string             `json:"message_text"`
	LlmResponse               string             `json:"llm_response"`
	ReplyUri                  *string            `json:"reply_uri"`
	ReplyCid                  *string            `json:"reply_cid"`
	Status                    string             `json:"status"`
	RetryCount                *int32             `json:"retry_count"`
	ErrorMessage              *string            `json:"error_message"`
	UsedGoogleSearchGrounding *bool              `json:"used_google_search_grounding"`
	ModelName                 *string            `json:"model_name"`
	ReceivedAt                pgtype.Timestamptz `json:"received_at"`
	ProcessingStartedAt       pgtype.Timestamptz `json:"processing_started_at"`
}

func (q *Queries) InsertMessageHistory(ctx context.Context, arg InsertMessageHistoryParams) (MessageHistory, error) {
	row := q.db.QueryRow(ctx, insertMessageHistory,
		arg.MessageUri,
		arg.MessageCid,
		arg.AuthorDid,
		arg.AuthorHandle,
		arg.MessageText,
		arg.LlmResponse,
		arg.ReplyUri,
		arg.ReplyCid,
		arg.Status,
		arg.RetryCount,
		arg.ErrorMessage,
		arg.UsedGoogleSearchGrounding,
		arg.ModelName,
		arg.ReceivedAt,
		arg.ProcessingStartedAt,
	)
	var i MessageHistory
	err := row.Scan(
		&i.ID,
		&i.MessageUri,
		&i.MessageCid,
		&i.AuthorDid,
		&i.AuthorHandle,
		&i.MessageText,
		&i.LlmResponse,
		&i.ReplyUri,
		&i.ReplyCid,
		&i.Status,
		&i.RetryCount,
		&i.ErrorMessage,
		&i.UsedGoogleSearchGrounding,
		&i.ReceivedAt,
		&i.ProcessingStartedAt,
		&i.CompletedAt,
		&i.ModelName,
	)
	return i, err
}
