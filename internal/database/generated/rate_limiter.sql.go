// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: rate_limiter.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRateLimiterStats = `-- name: GetRateLimiterStats :one
SELECT model_name, requests_this_minute, requests_today, tokens_today, 
       google_search_today,
       last_minute_reset, last_day_reset, consecutive_minute_fails, wait_until_midnight, updated_at
FROM rate_limiter_stats
WHERE model_name = $1
`

func (q *Queries) GetRateLimiterStats(ctx context.Context, modelName string) (RateLimiterStat, error) {
	row := q.db.QueryRow(ctx, getRateLimiterStats, modelName)
	var i RateLimiterStat
	err := row.Scan(
		&i.ModelName,
		&i.RequestsThisMinute,
		&i.RequestsToday,
		&i.TokensToday,
		&i.GoogleSearchToday,
		&i.LastMinuteReset,
		&i.LastDayReset,
		&i.ConsecutiveMinuteFails,
		&i.WaitUntilMidnight,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertRateLimiterStats = `-- name: UpsertRateLimiterStats :exec
INSERT INTO rate_limiter_stats (
    model_name, 
    requests_this_minute, 
    requests_today, 
    tokens_today, 
    google_search_today,
    last_minute_reset, 
    last_day_reset, 
    consecutive_minute_fails, 
    wait_until_midnight,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, NOW()
)
ON CONFLICT (model_name) 
DO UPDATE SET
    requests_this_minute = EXCLUDED.requests_this_minute,
    requests_today = EXCLUDED.requests_today,
    tokens_today = EXCLUDED.tokens_today,
    google_search_today = EXCLUDED.google_search_today,
    last_minute_reset = EXCLUDED.last_minute_reset,
    last_day_reset = EXCLUDED.last_day_reset,
    consecutive_minute_fails = EXCLUDED.consecutive_minute_fails,
    wait_until_midnight = EXCLUDED.wait_until_midnight,
    updated_at = NOW()
`

type UpsertRateLimiterStatsParams struct {
	ModelName              string             `json:"model_name"`
	RequestsThisMinute     int32              `json:"requests_this_minute"`
	RequestsToday          int32              `json:"requests_today"`
	TokensToday            int32              `json:"tokens_today"`
	GoogleSearchToday      int32              `json:"google_search_today"`
	LastMinuteReset        pgtype.Timestamptz `json:"last_minute_reset"`
	LastDayReset           pgtype.Timestamptz `json:"last_day_reset"`
	ConsecutiveMinuteFails int32              `json:"consecutive_minute_fails"`
	WaitUntilMidnight      bool               `json:"wait_until_midnight"`
}

func (q *Queries) UpsertRateLimiterStats(ctx context.Context, arg UpsertRateLimiterStatsParams) error {
	_, err := q.db.Exec(ctx, upsertRateLimiterStats,
		arg.ModelName,
		arg.RequestsThisMinute,
		arg.RequestsToday,
		arg.TokensToday,
		arg.GoogleSearchToday,
		arg.LastMinuteReset,
		arg.LastDayReset,
		arg.ConsecutiveMinuteFails,
		arg.WaitUntilMidnight,
	)
	return err
}
